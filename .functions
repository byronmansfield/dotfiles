# ================================================================
# FUNCTIONS
# ================================================================

# returns internal and external ip
myip() {
	echo "--------------- Network Information ---------------"
  echo "  Internal IP:        " $(ifconfig | grep 'inet ' | grep -Fv 127 | grep 192 | awk '{print $2}')
  echo "  External IP:        " $(curl -s icanhazip.com)
	echo "---------------------------------------------------"
}

# better ls command
# la() {
#   if [ $# -eq 0 ]; then
#     ls -lAh --color=auto | grep -v total
#     if [ `ls -lAh --color=auto | grep -v total | wc -l` -eq 0 ]; then
#       echo "Empty directory"
#     fi
#   else
#     ls -lAh --color=auto "$@" | grep -v total
#     if [ `ls -lAh --color=auto "$@" | grep -v total | wc -l` -eq 0 ]; then
#       echo "Empty directory"
#     fi
#   fi
# }

# turn hidden files on/off in Finder
hiddenOn() {
	defaults write com.apple.Finder AppleShowAllFiles YES ;
}
hiddenOff() {
	defaults write com.apple.Finder AppleShowAllFiles NO ;
}

# hide desktop icons
hideDesktop() {
	defaults write com.apple.finder CreateDesktop -bool false;killall Finder;say icons hidden
}
showDesktop() {
	defaults write com.apple.finder CreateDesktop -bool true;killall Finder;say icons visible
}

# postgres functions
pgstart() {
  pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start;
}
pgstop() {
  pg_ctl -D /usr/local/var/postgres stop -m fast ;
}
pgstatus() {
  pg_ctl -D /usr/local/var/postgres status ;
}

# webdriver functions
wdstart() {
  webdriver-manager start ;
}
wdstop() {
  webdriver-manager stop ;
}

# Simple calculator
calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
				-e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
				-e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# A better git clone
# clones a repository, cds into it, and opens it in my editor.
#
# - arg 1 - url|username|repo remote endpoint, username on github, or name of
#           repository.
# - arg 2 - (optional) name of repo
#
# usage:
#   $ clone things
#     .. git clone git@github.com:byronmansfield/things.git things
#     .. cd things
#     .. vim .
#
#   $ clone yeoman generator
#     .. git clone git@github.com:yeoman/generator.git generator
#     .. cd generator
#     .. vim .
#
#   $ clone git@github.com:byronmansfield/dotfiles.git
#     .. git clone git@github.com:byronmansfield/dotfiles.git dotfiles
#     .. cd dots
#     .. vim .

clone() {
  local username="byronmansfield"

  local url=$1;
  local repo=$2;

  if [[ ${url:0:4} == 'http' || ${url:0:3} == 'git' ]]
  then
    # just clone this thing.
    repo=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
  elif [[ -z $repo ]]
  then
    # my own stuff.
    repo=$url;
    url="git@github.com:$username/$repo";
  else
    # not my own, but I know whose it is.
    url="git@github.com:$url/$repo.git";
  fi

  git clone $url $repo && cd $repo && vim .;
}

# simple git log
# usage glr v0.2.2 v0.2.3
glr() {
	git log $1 $2 --pretty=format:'* %h %s' --date=short --no-merges
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [ "$remote" ] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}

# Syntax-highlight JSON strings or files
json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# get gzipped size
gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
note() {
	local title
	local body
	if [ -t 0 ]; then
		title="$1"
		body="$2"
	else
		title=$(cat)
	fi
	osascript >/dev/null <<EOF
tell application "Notes"
        tell account "iCloud"
                tell folder "Notes"
                        make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
                end tell
        end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
        tell the default list
                make new reminder with properties {name:"$text"}
        end tell
end tell
EOF
}

# `m` with no arguments opens the current directory in TextMate, otherwise
# opens the given location
m() {
	if [ $# -eq 0 ]; then
		mate .
	else
		mate "$@"
	fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# Create animated GIFs from any video
# Uses http://gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include an extension."
  fi
}

# GitHub URL for current repo.
gurl() {
  local remotename="${@:-origin}"
  local remote="$(git remote -v | awk '/^'"$remotename"'.*\(push\)$/ {print $2}')"
  [ "$remote" ] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  echo "https://github.com/$user_repo"
}

# open last commit in GitHub, in the browser.
gfu() {
  local n="${@:-1}"
  n=$((n-1))
  open $(git log -n 1 --skip=$n --pretty=oneline | awk "{printf \"$(gurl)/commit/%s\", substr(\$1,1,7)}")
}

# Opens the github page for the current git repository in your browser
# git@github.com:jasonneylon/dotfiles.git
# https://github.com/jasonneylon/dotfiles/
gh() {
  giturl=$(git config --get remote.origin.url)
  giturl=${giturl/git\@github\.com\:/https://github.com/}
  giturl=${giturl/\.git/\/tree/}
  branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
  branch="(unnamed branch)"     # detached HEAD
  branch=${branch##refs/heads/}
  giturl=$giturl$branch
  open -a google\ chrome $giturl
}

# used for pip completion
# two part - other is in zshrc
_pip_completion() {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}

# Check most used in history
mostused() {
  history | awk '{print $2}' | sort | uniq -c | sort -nr | head;
}

# better new dir
newdir() {
  makdir -p "$@" && eval cd "$@";
}
